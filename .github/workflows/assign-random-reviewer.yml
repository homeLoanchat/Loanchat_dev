name: Assign random reviewer

on:
  pull_request_target:
    types: [opened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  REVIEWER_POOL: |
    juncity-kim
    jaeaeee
    doublejh0501
    zneda330
  REVIEWER_COUNT: "1"

jobs:
  roulette:
    runs-on: ubuntu-latest
    steps:
      - name: Pick random reviewer & request review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const pr = context.payload.pull_request;
              if (!pr || pr.draft) {
                core.notice("Draft PR or no PR payload – skipping.");
                return;
              }

              // 후보 풀
              const pool = (process.env.REVIEWER_POOL || "")
                .split("\n").map(s => s.trim()).filter(Boolean);

              // 작성자/이미 요청된 리뷰어 제외
              const author = pr.user.login.toLowerCase();
              const already = (pr.requested_reviewers || []).map(u => u.login.toLowerCase());
              let candidates = pool
                .map(u => u.trim())
                .filter(Boolean)
                .filter(u => u.toLowerCase() !== author)
                .filter(u => !already.includes(u.toLowerCase()));

              if (candidates.length === 0) {
                core.notice("No available reviewers after excluding author/already-requested.");
                return;
              }

              // 랜덤 셔플
              for (let i = candidates.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [candidates[i], candidates[j]] = [candidates[j], candidates[i]];
              }
              const need = Math.min(parseInt(process.env.REVIEWER_COUNT || "1", 10), candidates.length);
              const chosen = candidates.slice(0, need);

              // 리뷰 요청
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                reviewers: chosen,
              });

              // 코멘트
              const body = `@${chosen.join(", @")} 님, 랜덤 리뷰 미션이 도착했습니다! 🚀\n\n작성자: @${pr.user.login}`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body,
              });

              core.notice(`Requested review from: ${chosen.join(", ")}`);
            } catch (error) {
              // 에러 원인을 슬랙/액션 로그에서 바로 볼 수 있게
              core.error(`Failed to assign reviewer: ${error.message}`);
              if (error.response && error.response.data) {
                core.error(`GitHub API response: ${JSON.stringify(error.response.data)}`);
              }
              core.setFailed(error.message);
            }

            